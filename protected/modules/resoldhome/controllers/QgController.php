<?php
/**
 *  求购
 * User: jt
 * Date: 2016/10/31 9:33
 */
class QgController extends ResoldHomeController{

    public $title;

    public $category;

    public function beforeAction($action)
    {
        $this->category = isset($_GET['type']) && in_array($_GET['type'],array('1','2','3')) ? $_GET['type'] : 1;
        $this->title = Yii::app()->params['category'][$this->category];
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex($sort='',$kw='',$area='',$street='',$price='',$bedroom='',$size='',$cate='',$minprice='',$maxprice='',$minsize='',$maxsize=''){
        $kw=$this->cleanXss($kw);
        $xs = Yii::app()->search->house_qg;
        $xs->setQuery($kw);
        $xs->setFacets(array('status'), true);//分面统计
        $xs->addRange('deleted',0,0); //是否删除

        $xs->addQueryString('status:1',XS_CMD_QUERY_OP_AND);
        $xs->addQueryString('category:'.$this->category,XS_CMD_QUERY_OP_AND);

        $tags = $this->getAllTag();
        $all_tag = array();
        foreach ($tags as $key=>$tag){
            foreach ($tag as $el){
                $all_tag[$key][$el['id']] = $el;
            }
        }
        $condition = array();
        if($kw){
            $condition = array_merge($condition,array('kw'=>$kw));
        }

        //区域
        if($area || $street){
            if(($selectedArea = AreaExt::model()->findByPk($area)) &&  $selectedArea->getIsFirstLevel()) {
                $xs->addQueryString('area:' . $selectedArea->id, XS_CMD_QUERY_OP_AND);
                $condition = array_merge($condition,array('area'=>$selectedArea->name));
            }
            if(($selectedStreet = AreaExt::model()->findByPk($street)) && $selectedArea = $selectedStreet->getParentArea()) {
                $xs->addQueryString('street:'.$selectedStreet->id,XS_CMD_QUERY_OP_AND);
                $condition = array_merge($condition,array('street'=>$selectedStreet->name));
            }
        }
        //价格
        if($price || $minprice || $maxprice){
            $price_tag = array();
            if($price) {
                if (isset($all_tag[ResoldQgExt::$price_cate[$this->category]][$price])) {
                    $price_tag = $all_tag[ResoldQgExt::$price_cate[$this->category]][$price];
                }
            }else{
                $price_tag = array('min'=>$minprice ,'max'=>$maxprice);
            }
            if($price_tag){
                if($price_tag['min'] > 0 && $price_tag['max'] > 0){
                    $price_tag['max'] >= $price_tag['min'] ? $xs->addRange('price',$price_tag['min'] , $price_tag['max']) : $xs->addRange('price',null,$price_tag['max']);
                }else{
                    $price_tag['min'] > 0 ? $xs->addRange('price',$price_tag['min'] , null) : $xs->addRange('price',null,$price_tag['max']);
                }
                if(isset($price_tag['id'])){
                    $condition = array_merge($condition,array('price'=>$price_tag['name']));
                }
            }
        }
        //户型
        if($bedroom && $this->category == 1) {
            if (isset($all_tag['resoldhuxing'][$bedroom]) && $hxTag = $all_tag['resoldhuxing'][$bedroom]) {
                if ($hxTag['min'] > 0 && $hxTag['max'] > 0) {//max和min都设置了数值
                    if ($hxTag['max'] - $hxTag['min'] >= 0) {//如：5-7之间户型
                        $xs->addRange('bedroom',$hxTag['min'] , $hxTag['max']);
                    } else {
                        $xs->addRange('bedroom',null,$hxTag['max']);
                    }
                } else {//有一个0
                    if ($hxTag->min > 0) {
                        $xs->addRange('bedroom',$hxTag['min'] , null);
                    } else {
                        $xs->addRange('bedroom',null, $hxTag['max']);
                    }
                }
                $condition = array_merge($condition,array('bedroom'=>$hxTag['name']));
            }
        }
        //面积
        if($size || $maxsize || $minsize){
            $size_tag = array();
            if($size) {
                if (isset($all_tag[ResoldQgExt::$size_cate[$this->category]][$size])) {
                    $size_tag = $all_tag[ResoldQgExt::$size_cate[$this->category]][$size];
                }
            }else{
                $size_tag = array('min'=>$minsize, 'max'=>$maxsize);
            }
            if($size_tag){
                if($size_tag['min'] > 0 && $size_tag['max'] > 0){
                    $size_tag['max'] - $size_tag['min'] >= 0 ? $xs->addRange('size',$size_tag['min'] , $size_tag['max']) : $xs->addRange('size',null,$size_tag['max']);
                }else{
                    $size_tag['min'] > 0 ? $xs->addRange('size',$size_tag['min'] , null) : $xs->addRange('size',null,$size_tag['max']);
                }
                if(!isset($size_tag['id'])){
                    if($size_tag['min'] && $size_tag['max']){
                        $size_tag['name'] = $size_tag['min'].'-'.$size_tag['max'].'平米';
                    }elseif($size_tag['min']){
                        $size_tag['name'] = $size_tag['min'].'平米以上';
                    }elseif($size_tag['max']){
                        $size_tag['name'] = $size_tag['max'].'平米以下';
                    }
                }
                $condition = array_merge($condition,array('size'=>$size_tag['name']));
            }
        }
        //商铺类型
        if($cate && ($this->category == 2 || $this->category == 3)){
            $cate_tag = array();
            if (isset($all_tag[ResoldQgExt::$type_cate[$this->category]][$cate])) {
                $cate_tag = $all_tag[ResoldQgExt::$type_cate[$this->category]][$cate];
            }
            if($cate_tag){
                $xs->addQueryString('tag:'.$cate_tag['id'],XS_CMD_QUERY_OP_AND);
                $condition = array_merge($condition,array('cate'=>$cate_tag['name']));
            }
        }
        $xs->setSort('updated');
        $criteria = new CDbCriteria(array(
            'order'=>'t.updated desc',
            'with'=>array('areaInfo')
        ));
        //排序
        if($sort){
            if($sort == '1'){
                $xs->setSort('created');
                $criteria->order = 't.created desc';
            }
            if($sort == '3'){
                $xs->setSort('price',true);
                $criteria->order = 't.price asc';
            }
            if($sort == '2'){
                $xs->setSort('price');
                $criteria->order = 't.price desc';
            }
        }
        $count = 0;
        $xs->search();
        $count = array_sum($xs->getFacets('status'));//通过获取分面搜索值能得到精准数量

        $pager = new CPagination($count);
        $xs->setLimit(10, 10*$pager->currentPage);
        $docs = $xs->search();
        $ids = array();
        if($docs){
            foreach ($docs as $k=>$v) {
                $ids[] = $v->id;
            }
        }

        $criteria->addInCondition('t.id',$ids);
        $data = ResoldQgExt::model()->with('areaInfo','streetInfo')->findAll($criteria);
        foreach ($data as $item){
            $item->data_conf = json_decode($item->data_conf,true);
        }
        $params = array(
            'area'=>$area,
            'price'=>$price,
            'bedroom'=>$bedroom,
            'size'=>$size,
            'cate'=>$cate,
            'street'=>$street,
            'minprice'=>$minprice,
            'maxprice'=>$maxprice,
            'minsize'=>$minsize,
            'maxsize'=>$maxsize,
            'type'=>$this->category,
            'sort'=>$sort
        );
        $this->render('index',array(
            'list'=>$data,
            'pager'=>$pager,
            'params'=>$params,
            'condition'=>$condition,
            'all_tag'=>$all_tag
        ));
    }

    public function actionDetail($id){
        $resold_qg = ResoldQgExt::model()->enabled()->undeleted()->with('areaInfo','streetInfo')->findByPk($id,'category=:cate',array(':cate'=>$this->category));
        if(!$resold_qg)
            throw new CHttpException(404,'找不到二手房');
        $resold_qg->hits = $resold_qg->hits + 1;
        $resold_qg->save();

        $all_tag = $this->allTag;
        $zx = '暂无';
        foreach ($all_tag['resoldzx'] as $item) {
            if($item['id'] == $resold_qg->decoration){
                $zx = $item['name'];
            }
        }
        $resold_qg->decoration = $zx;
        $towards = '暂无';
        foreach ($all_tag['resoldface'] as $face){
            if($face['id'] == $resold_qg->towards){
                $towards = $face['name'];
            }
        }
        $resold_qg->towards = $towards;
        $tags = array();
        if($resold_qg->data_conf){
            $resold_qg->data_conf = json_decode($resold_qg->data_conf,true);
            isset($resold_qg->data_conf['tags']) && $tags = TagExt::getNameByTag($resold_qg->data_conf['tags'],true);
        }
        $extend_plot = '';
        if($resold_qg->hid){
            $resold_qg->hid = json_decode($resold_qg->hid,true);
            $plots = PlotExt::model()->findAllByAttributes(array('id'=>$resold_qg->hid));
            $extend_plot_array = array();
            foreach ($plots as $plot){
                $extend_plot_array[] = $plot->title;
            }
            $extend_plot = implode(" , ",$extend_plot_array);
        }
        $this->render('detail',array(
            'resold_qg'=>$resold_qg,
            'extend_plot'=>$extend_plot,
            'tags'=>$tags,
            ));
    }

}

